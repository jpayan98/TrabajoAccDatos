CREATE TABLE TIENDA (
    IDTIENDA NUMBER PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    DIRECCION VARCHAR(150) NOT NULL,
    COD_POSTAL NUMBER NOT NULL DEFAULT 28941
);



CREATE TABLE TRABAJADORES (
    IDTRABAJADOR NUMBER(4) PRIMARY KEY,
    IDTIENDA NUMBER(4) NOT NULL,
    NOMBRE VARCHAR(20) NOT NULL,
    APE1 VARCHAR(20) NOT NULL,
    APE2 VARCHAR(20),
    DNI VARCHAR(9) NOT NULL UNIQUE,
    RESIDENCIA VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(15),
    CONTACTO VARCHAR(100),
    HORARIO VARCHAR(20) CONTRAINT CK_HORARIO CHECK(HORARIO IN ('COMPLETO','PARCIAL')),
    SUELDO NUMBER(6,2),
    CONSTRAINT FK_TIENDA
        FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA)
);



CREATE TABLE PRODUCTOAS (
    IDPRODUCTO NUMBER(4) PRIMARY KEY,
    IDTIENDA NUMBER(4) NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(200),
    PRECIO NUMBER(7,2) NOT NULL,
    CONSTRAINT FK_PRODUCTO_TIENDA
        FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA)
);



CREATE TABLE CLIENTES (
    IDCLIENTE NUMBER(4) PRIMARY KEY,
    NOMBRE VARCHAR(20) NOT NULL,
    APE1 VARCHAR(20) NOT NULL,
    APE2 VARCHAR(20),
    RESIDENCIA VARCHAR(100) NOT NULL,
    TELEFONO NUMBER(9) CONSTRAINT CK_TELEFONO1 CHECK(LENGTH(TELEFONO)=9),
    EMAIL VARCHAR(100) CONSTRAINT CK_EMAIL CHECK(EMAIL LIKE '%@%.%'),
    GASTO_TOTAL NUMBER(10,2) DEFAULT 0,
    VIP VARCHAR2(2) CONSTRAINT CK_VIP CHECK(VIP IN ('SI','NO'))
);




CREATE TABLE FACTURAS (
    IDFACTURA NUMBER PRIMARY KEY,
    IDPRODUCTO NUMBER NOT NULL,
    IDCLIENTE NUMBER NOT NULL,
    FECHACOMPRA DATE NOT NULL,
    PRECIO_UD NUMBER(7,2),
    CANTIDAD NUMBER NOT NULL CHECK (CANTIDAD > 0),
    GASTO NUMBER(10,2),
    IVA NUMBER(2) DEFAULT 21 NOT NULL,
    GASTO_TOTAL NUMBER(10,2),
    CONSTRAINT FK_FACTURA_PRODUCTO FOREIGN KEY (IDPRODUCTO) REFERENCES PRODUCTOAS(IDPRODUCTO),
    CONSTRAINT FK_FACTURA_CLIENTE FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTES(IDCLIENTE)
);


CREATE OR REPLACE TRIGGER TR_FACTURAS_GASTO
BEFORE INSERT OR UPDATE ON FACTURAS
FOR EACH ROW
DECLARE
    v_precio NUMBER(7,2);
BEGIN
    -- Obtener el precio del producto desde PRODUCTOAS
    SELECT PRECIO
    INTO v_precio
    FROM PRODUCTOAS
    WHERE IDPRODUCTO = :NEW.IDPRODUCTO;

    -- Asignar precio unitario
    :NEW.PRECIO_UD := v_precio;

    -- Calcular gasto
    :NEW.GASTO := :NEW.CANTIDAD * :NEW.PRECIO_UD;

    -- Calcular gasto total con IVA
    :NEW.GASTO_TOTAL := :NEW.GASTO * (1 + :NEW.IVA / 100);
END;
/


CREATE OR REPLACE TRIGGER TR_FACTURAS_GASTO
BEFORE INSERT ON FACTURAS
FOR EACH ROW
DECLARE
    v_precio NUMBER(7,2);
    v_stock NUMBER(4);
BEGIN
    -- Obtener precio y stock del producto
    SELECT PRECIO, STOCK
    INTO v_precio, v_stock
    FROM PRODUCTOAS
    WHERE IDPRODUCTO = :NEW.IDPRODUCTO
    FOR UPDATE;  -- bloquea la fila para evitar concurrencia

    -- Verificar si hay stock suficiente
    IF :NEW.CANTIDAD > v_stock THEN
        RAISE_APPLICATION_ERROR(-20001, 'No hay suficiente stock para el producto ID=' || :NEW.IDPRODUCTO);
    END IF;

    -- Asignar precio unitario
    :NEW.PRECIO_UD := v_precio;

    -- Calcular gasto
    :NEW.GASTO := :NEW.CANTIDAD * :NEW.PRECIO_UD;

    -- Calcular gasto total con IVA
    :NEW.GASTO_TOTAL := :NEW.GASTO * (1 + :NEW.IVA / 100);

    -- Restar la cantidad del stock
    UPDATE PRODUCTOAS
    SET STOCK = STOCK - :NEW.CANTIDAD
    WHERE IDPRODUCTO = :NEW.IDPRODUCTO;
END;
/

SQL> CREATE OR REPLACE TRIGGER TR_UPDATE_PROFIT
  2  AFTER INSERT OR UPDATE OR DELETE ON FACTURAS
  3  DECLARE
  4  BEGIN
  5      -- Actualiza el profit de todas las tiendas
  6      MERGE INTO TIENDA t
  7      USING (
  8          SELECT p.IDTIENDA,
  9                 COALESCE(SUM(f.GASTO),0) - COALESCE(SUM(tr.SUELDO),0) AS PROFIT
 10          FROM TIENDA t2
 11          JOIN PRODUCTOAS p ON p.IDTIENDA = t2.IDTIENDA
 12          LEFT JOIN FACTURAS f ON f.IDPRODUCTO = p.IDPRODUCTO
 13          LEFT JOIN TRABAJADORES tr ON tr.IDTIENDA = t2.IDTIENDA
 14          GROUP BY p.IDTIENDA
 15      ) calc
 16      ON (t.IDTIENDA = calc.IDTIENDA)
 17      WHEN MATCHED THEN
 18          UPDATE SET t.PROFIT = calc.PROFIT;
 19  END;
 20  /


