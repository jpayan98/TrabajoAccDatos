CREATE TABLE TIENDA (
    IDTIENDA NUMBER PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    DIRECCION VARCHAR(150) NOT NULL,
    COD_POSTAL NUMBER NOT NULL DEFAULT 28941
);



CREATE TABLE TRABAJADORES (
    IDTRABAJADOR NUMBER(4) PRIMARY KEY,
    IDTIENDA NUMBER(4) NOT NULL,
    NOMBRE VARCHAR(20) NOT NULL,
    APE1 VARCHAR(20) NOT NULL,
    APE2 VARCHAR(20),
    DNI VARCHAR(9) NOT NULL UNIQUE,
    RESIDENCIA VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(15),
    CONTACTO VARCHAR(100),
    HORARIO VARCHAR(20) CONTRAINT CK_HORARIO CHECK(HORARIO IN ('COMPLETO','PARCIAL')),
    SUELDO NUMBER(6,2),
    CONSTRAINT FK_TIENDA
        FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA)
);



CREATE TABLE PRODUCTOAS (
    IDPRODUCTO NUMBER(4) PRIMARY KEY,
    IDTIENDA NUMBER(4) NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(200),
    PRECIO NUMBER(7,2) NOT NULL,
    CONSTRAINT FK_PRODUCTO_TIENDA
        FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA)
);



CREATE TABLE CLIENTES (
    IDCLIENTE NUMBER(4) PRIMARY KEY,
    NOMBRE VARCHAR(20) NOT NULL,
    APE1 VARCHAR(20) NOT NULL,
    APE2 VARCHAR(20),
    RESIDENCIA VARCHAR(100) NOT NULL,
    TELEFONO NUMBER(9) CONSTRAINT CK_TELEFONO1 CHECK(LENGTH(TELEFONO)=9),
    EMAIL VARCHAR(100) CONSTRAINT CK_EMAIL CHECK(EMAIL LIKE '%@%.%'),
    GASTO_TOTAL NUMBER(10,2) DEFAULT 0,
    VIP VARCHAR2(2) CONSTRAINT CK_VIP CHECK(VIP IN ('SI','NO'))
);




CREATE TABLE FACTURAS (
    IDFACTURA NUMBER PRIMARY KEY,
    IDPRODUCTO NUMBER NOT NULL,
    IDCLIENTE NUMBER NOT NULL,
    FECHACOMPRA DATE NOT NULL,
    PRECIO_UD NUMBER(7,2),
    CANTIDAD NUMBER NOT NULL CHECK (CANTIDAD > 0),
    GASTO NUMBER(10,2),
    IVA NUMBER(2) DEFAULT 21 NOT NULL,
    GASTO_TOTAL NUMBER(10,2),
    CONSTRAINT FK_FACTURA_PRODUCTO FOREIGN KEY (IDPRODUCTO) REFERENCES PRODUCTOAS(IDPRODUCTO),
    CONSTRAINT FK_FACTURA_CLIENTE FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTES(IDCLIENTE)
);


CREATE OR REPLACE TRIGGER TR_FACTURAS_GASTO
BEFORE INSERT OR UPDATE ON FACTURAS
FOR EACH ROW
DECLARE
    v_precio NUMBER(7,2);
BEGIN
    -- Obtener el precio del producto desde PRODUCTOAS
    SELECT PRECIO
    INTO v_precio
    FROM PRODUCTOAS
    WHERE IDPRODUCTO = :NEW.IDPRODUCTO;

    -- Asignar precio unitario
    :NEW.PRECIO_UD := v_precio;

    -- Calcular gasto
    :NEW.GASTO := :NEW.CANTIDAD * :NEW.PRECIO_UD;

    -- Calcular gasto total con IVA
    :NEW.GASTO_TOTAL := :NEW.GASTO * (1 + :NEW.IVA / 100);
END;
/


CREATE OR REPLACE TRIGGER TR_FACTURAS_GASTO
BEFORE INSERT ON FACTURAS
FOR EACH ROW
DECLARE
    v_precio NUMBER(7,2);
    v_stock NUMBER(4);
BEGIN
    -- Obtener precio y stock del producto
    SELECT PRECIO, STOCK
    INTO v_precio, v_stock
    FROM PRODUCTOAS
    WHERE IDPRODUCTO = :NEW.IDPRODUCTO
    FOR UPDATE;  -- bloquea la fila para evitar concurrencia

    -- Verificar si hay stock suficiente
    IF :NEW.CANTIDAD > v_stock THEN
        RAISE_APPLICATION_ERROR(-20001, 'No hay suficiente stock para el producto ID=' || :NEW.IDPRODUCTO);
    END IF;

    -- Asignar precio unitario
    :NEW.PRECIO_UD := v_precio;

    -- Calcular gasto
    :NEW.GASTO := :NEW.CANTIDAD * :NEW.PRECIO_UD;

    -- Calcular gasto total con IVA
    :NEW.GASTO_TOTAL := :NEW.GASTO * (1 + :NEW.IVA / 100);

    -- Restar la cantidad del stock
    UPDATE PRODUCTOAS
    SET STOCK = STOCK - :NEW.CANTIDAD
    WHERE IDPRODUCTO = :NEW.IDPRODUCTO;
END;
/

SQL> CREATE OR REPLACE TRIGGER TR_UPDATE_PROFIT
  2  AFTER INSERT OR UPDATE OR DELETE ON FACTURAS
  3  DECLARE
  4  BEGIN
  5      -- Actualiza el profit de todas las tiendas
  6      MERGE INTO TIENDA t
  7      USING (
  8          SELECT p.IDTIENDA,
  9                 COALESCE(SUM(f.GASTO),0) - COALESCE(SUM(tr.SUELDO),0) AS PROFIT
 10          FROM TIENDA t2
 11          JOIN PRODUCTOAS p ON p.IDTIENDA = t2.IDTIENDA
 12          LEFT JOIN FACTURAS f ON f.IDPRODUCTO = p.IDPRODUCTO
 13          LEFT JOIN TRABAJADORES tr ON tr.IDTIENDA = t2.IDTIENDA
 14          GROUP BY p.IDTIENDA
 15      ) calc
 16      ON (t.IDTIENDA = calc.IDTIENDA)
 17      WHEN MATCHED THEN
 18          UPDATE SET t.PROFIT = calc.PROFIT;
 19  END;
 20  /







import libsql
import envyte

"""Crea y devuelve la conexión con Turso."""
url = envyte.get("URL_DB")
auth_token = envyte.get("API_TOKEN")
conn = libsql.connect("aadut1", sync_url=url, auth_token=auth_token)
conn.sync()

# --- BORRAR TABLAS ---
conn.execute("PRAGMA foreign_keys = OFF;")
conn.execute("DROP TABLE IF EXISTS FACTURAS;")
conn.execute("DROP TABLE IF EXISTS PRODUCTOS;")
conn.execute("DROP TABLE IF EXISTS TRABAJADORES;")
conn.execute("DROP TABLE IF EXISTS CLIENTES;")
conn.execute("DROP TABLE IF EXISTS TIENDA;")
conn.execute("PRAGMA foreign_keys = ON;")

# --- CREAR TABLAS ---
conn.execute('''
CREATE TABLE TIENDA (
    IDTIENDA INTEGER PRIMARY KEY AUTOINCREMENT,
    NOMBRE VARCHAR(100) NOT NULL,
    DIRECCION VARCHAR(150) NOT NULL,
    COD_POSTAL INTEGER NOT NULL DEFAULT 28941,
    PROFIT REAL DEFAULT 0
);
''')

conn.execute('''
CREATE TABLE TRABAJADORES (
    IDTRABAJADOR INTEGER PRIMARY KEY AUTOINCREMENT,
    IDTIENDA INTEGER NOT NULL,
    NOMBRE VARCHAR(20) NOT NULL,
    APE1 VARCHAR(20) NOT NULL,
    APE2 VARCHAR(20),
    DNI VARCHAR(9) NOT NULL UNIQUE,
    RESIDENCIA VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(15),
    CONTACTO VARCHAR(100),
    HORARIO VARCHAR(20) CHECK(HORARIO IN ('COMPLETO','PARCIAL')),
    SUELDO REAL,
    FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA) ON DELETE CASCADE
);
''')

conn.execute('''
CREATE TABLE PRODUCTOS (
    IDPRODUCTO INTEGER PRIMARY KEY AUTOINCREMENT,
    IDTIENDA INTEGER NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(200),
    PRECIO REAL NOT NULL,
    STOCK INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA) ON DELETE CASCADE
);
''')

conn.execute('''
CREATE TABLE CLIENTES (
    IDCLIENTE INTEGER PRIMARY KEY AUTOINCREMENT,
    NOMBRE VARCHAR(20) NOT NULL,
    APE1 VARCHAR(20) NOT NULL,
    APE2 VARCHAR(20),
    RESIDENCIA VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(9) CHECK(LENGTH(TELEFONO)=9),
    EMAIL VARCHAR(100) CHECK(EMAIL LIKE '%@%.%'),
    GASTO_TOTAL REAL DEFAULT 0,
    VIP VARCHAR(2) CHECK(VIP IN ('SI','NO'))
);
''')

conn.execute('''
CREATE TABLE FACTURAS (
    IDFACTURA INTEGER PRIMARY KEY AUTOINCREMENT,
    IDPRODUCTO INTEGER NOT NULL,
    IDCLIENTE INTEGER NOT NULL,
    FECHACOMPRA TEXT NOT NULL,
    PRECIO_UD REAL,
    CANTIDAD INTEGER CHECK (CANTIDAD > 0),
    GASTO REAL,
    IVA INTEGER DEFAULT 21 NOT NULL,
    GASTO_TOTAL REAL,
    FOREIGN KEY (IDPRODUCTO) REFERENCES PRODUCTOS(IDPRODUCTO) ON DELETE CASCADE,
    FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTES(IDCLIENTE) ON DELETE CASCADE
);
''')
# --- TRIGGERS ---
# --- ELIMINAR TRIGGERS EXISTENTES ---
conn.execute("DROP TRIGGER IF EXISTS trg_facturas_check_stock;")
conn.execute("DROP TRIGGER IF EXISTS trg_facturas_after_insert;")
conn.execute("DROP TRIGGER IF EXISTS trg_update_profit_after_factura;")
conn.execute("DROP TRIGGER IF EXISTS trg_trabajadores_after_insert;")

# --- TRIGGER: Comprobar stock antes de insertar factura ---
conn.execute("""
CREATE TRIGGER trg_facturas_check_stock
BEFORE INSERT ON FACTURAS
FOR EACH ROW
BEGIN
    SELECT
        CASE
            WHEN (SELECT STOCK FROM PRODUCTOS WHERE IDPRODUCTO = NEW.IDPRODUCTO) IS NULL
                THEN RAISE(ABORT, 'Producto no existe.')
            WHEN (SELECT STOCK FROM PRODUCTOS WHERE IDPRODUCTO = NEW.IDPRODUCTO) < NEW.CANTIDAD
                THEN RAISE(ABORT, 'No hay suficiente stock del producto.')
        END;
END;
""")

# --- TRIGGER: Actualizar factura, stock y profit después de insertar factura ---
conn.execute("""
CREATE TRIGGER trg_facturas_after_insert
AFTER INSERT ON FACTURAS
FOR EACH ROW
BEGIN
    -- 1️⃣ Calcular precio y totales de la factura
    UPDATE FACTURAS
    SET
        PRECIO_UD = (SELECT PRECIO FROM PRODUCTOS WHERE IDPRODUCTO = NEW.IDPRODUCTO),
        GASTO = NEW.CANTIDAD * (SELECT PRECIO FROM PRODUCTOS WHERE IDPRODUCTO = NEW.IDPRODUCTO),
        GASTO_TOTAL = NEW.CANTIDAD * (SELECT PRECIO FROM PRODUCTOS WHERE IDPRODUCTO = NEW.IDPRODUCTO) * (1.0 + NEW.IVA / 100.0)
    WHERE IDFACTURA = NEW.IDFACTURA;

    -- 2️⃣ Actualizar stock del producto
    UPDATE PRODUCTOS
    SET STOCK = STOCK - NEW.CANTIDAD
    WHERE IDPRODUCTO = NEW.IDPRODUCTO;

    -- 3️⃣ Recalcular profit de la tienda del producto
    UPDATE TIENDA
    SET PROFIT = (
        COALESCE((
            SELECT SUM(f.GASTO_TOTAL)
            FROM FACTURAS f
            JOIN PRODUCTOS p ON f.IDPRODUCTO = p.IDPRODUCTO
            WHERE p.IDTIENDA = TIENDA.IDTIENDA
        ), 0)
        - COALESCE((
            SELECT SUM(t.SUELDO)
            FROM TRABAJADORES t
            WHERE t.IDTIENDA = TIENDA.IDTIENDA
        ), 0)
    )
    WHERE IDTIENDA = (SELECT IDTIENDA FROM PRODUCTOS WHERE IDPRODUCTO = NEW.IDPRODUCTO);
END;
""")

# --- TRIGGER: Actualizar profit al eliminar factura ---
conn.execute("""
CREATE TRIGGER trg_facturas_after_delete
AFTER DELETE ON FACTURAS
FOR EACH ROW
BEGIN
    UPDATE TIENDA
    SET PROFIT = (
        COALESCE((
            SELECT SUM(f.GASTO_TOTAL)
            FROM FACTURAS f
            JOIN PRODUCTOS p ON f.IDPRODUCTO = p.IDPRODUCTO
            WHERE p.IDTIENDA = TIENDA.IDTIENDA
        ), 0)
        - COALESCE((
            SELECT SUM(t.SUELDO)
            FROM TRABAJADORES t
            WHERE t.IDTIENDA = TIENDA.IDTIENDA
        ), 0)
    )
    WHERE IDTIENDA = (SELECT IDTIENDA FROM PRODUCTOS WHERE IDPRODUCTO = OLD.IDPRODUCTO);
END;
""")

# --- TRIGGER: Actualizar profit al insertar trabajador ---
conn.execute("""
CREATE TRIGGER trg_trabajadores_after_insert
AFTER INSERT ON TRABAJADORES
FOR EACH ROW
BEGIN
    UPDATE TIENDA
    SET PROFIT = (
        COALESCE((
            SELECT SUM(f.GASTO_TOTAL)
            FROM FACTURAS f
            JOIN PRODUCTOS p ON f.IDPRODUCTO = p.IDPRODUCTO
            WHERE p.IDTIENDA = TIENDA.IDTIENDA
        ), 0)
        - COALESCE((
            SELECT SUM(t.SUELDO)
            FROM TRABAJADORES t
            WHERE t.IDTIENDA = TIENDA.IDTIENDA
        ), 0)
    )
    WHERE IDTIENDA = NEW.IDTIENDA;
END;
""")


# --- INSERTS ---
conn.executemany(
    "INSERT INTO TIENDA (NOMBRE, DIRECCION, COD_POSTAL) VALUES (?, ?, ?);",
    [("Tienda Central", "Calle Mayor 10", 28001),
        ("Sucursal Norte", "Av. de la Paz 45", 28941)]
)

conn.executemany('''
INSERT INTO TRABAJADORES (IDTIENDA, NOMBRE, APE1, APE2, DNI, RESIDENCIA, TELEFONO, CONTACTO, HORARIO, SUELDO)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
''', [
    (1, "Ana", "García", "López", "12345678A", "Madrid", "600111222", "ana@tienda.com", "COMPLETO", 1800.50),
    (2, "Luis", "Martín", "Pérez", "87654321B", "Alcalá", "600333444", "luis@tienda.com", "PARCIAL", 1200.75),
])

conn.executemany('''
INSERT INTO PRODUCTOS (IDTIENDA, NOMBRE, DESCRIPCION, PRECIO, STOCK)
VALUES (?, ?, ?, ?, ?);
''', [
    (1, "Camiseta", "Camiseta de algodón 100%", 15.99, 50),
    (1, "Pantalón", "Pantalón vaquero azul", 29.99, 30),
    (2, "Zapatillas", "Zapatillas deportivas blancas", 45.50, 20)
])

conn.executemany('''
INSERT INTO CLIENTES (NOMBRE, APE1, APE2, RESIDENCIA, TELEFONO, EMAIL, GASTO_TOTAL, VIP)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);
''', [
    ("Carlos", "Ruiz", "Santos", "Madrid", "611223344", "carlos@gmail.com", 0, "NO"),
    ("Laura", "Gómez", "Pérez", "Toledo", "622334455", "laura@gmail.com", 0, "SI")
])

conn.executemany('''
INSERT INTO FACTURAS (IDPRODUCTO, IDCLIENTE, FECHACOMPRA, CANTIDAD)
VALUES (?, ?, ?, ?);
''', [
    (1, 1, "2025-10-27", 2),
    (3, 2, "2025-10-27", 1)
])

conn.execute('''COMMIT''')

# --- COMPROBACIONES ---
print("\n--- PRODUCTOS ---")
for row in conn.execute("SELECT * FROM PRODUCTOS;").fetchall():
    print(row)

print("\n--- FACTURAS ---")
for row in conn.execute("SELECT * FROM FACTURAS;").fetchall():
    print(row)

print("\n--- TIENDAS (profit) ---")
for row in conn.execute("SELECT * FROM TIENDA;").fetchall():
    print(row)

conn.close()
print("\n✅ Base de datos inicializada correctamente!")









import libsql
import envyte
import sys

url = envyte.get("URL_DB")
auth_token = envyte.get("API_TOKEN")

# Conexión con Turso
conn = libsql.connect("aadut1", sync_url=url, auth_token=auth_token)
conn.sync()

def menu_principal():
    while True:
        print("\n" + "="*50)
        print("          SISTEMA DE GESTIÓN DE TIENDAS")
        print("="*50)
        print("1. ➕ Insertar datos")
        print("2. 👁️  Consultar datos")
        print("3. ✏️  Actualizar datos")
        print("4. 🗑️  Eliminar datos")
        print("5. ❌ Salir del programa")
        print("="*50)

        opcion = input("Elige una opción (1-5): ")

        match opcion:
            case "1":
                menu_insertar()
            case "2":
                menu_consultar()
            case "3":
                menu_actualizar()
            case "4":
                menu_eliminar()
            case "5":
                print("👋 Saliendo del programa...")
                conn.close()
                sys.exit(0)
            case _:
                print("❌ Opción no válida. Inténtalo de nuevo.")

# ==================== FUNCIONES DE INSERCIÓN ====================

def InsertarTienda():
    nombre = input("Nombre de la tienda: ")
    direccion = input("Dirección de la tienda: ")
    cod_postal = input("Código postal (por defecto 28941): ") or "28941"

    try:
        conn.execute(
            "INSERT INTO TIENDA (NOMBRE, DIRECCION, COD_POSTAL) VALUES (?, ?, ?);",
            (nombre, direccion, int(cod_postal))
        )
        conn.commit()
        print(f"✅ Tienda '{nombre}' creada correctamente.\n")
        # Mostrar tienda creada de forma segura
        for row in conn.execute("SELECT * FROM TIENDA WHERE NOMBRE = ?;", (nombre,)).fetchall():
            print(row)
    except Exception as e:
        print("❌ Error al crear la tienda:", e)

def InsertarTrabajador():
    print("\n--- Tiendas disponibles ---")
    tiendas = conn.execute("SELECT IDTIENDA, NOMBRE FROM TIENDA;").fetchall()
    for tienda in tiendas:
        print(f"ID: {tienda[0]} - {tienda[1]}")
    
    try:
        idtienda = int(input("\nID de la tienda: "))
        nombre = input("Nombre: ")
        ape1 = input("Primer apellido: ")
        ape2 = input("Segundo apellido (opcional): ") or None
        dni = input("DNI: ")
        residencia = input("Residencia: ")
        telefono = input("Teléfono (opcional): ") or None
        contacto = input("Contacto (email): ")
        horario = input("Horario (COMPLETO/PARCIAL): ").upper()
        sueldo = float(input("Sueldo: "))

        conn.execute('''
        INSERT INTO TRABAJADORES (IDTIENDA, NOMBRE, APE1, APE2, DNI, RESIDENCIA, TELEFONO, CONTACTO, HORARIO, SUELDO)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
        ''', (idtienda, nombre, ape1, ape2, dni, residencia, telefono, contacto, horario, sueldo))
        conn.commit()
        print(f"✅ Trabajador '{nombre} {ape1}' creado correctamente.\n")
        
        # Mostrar trabajador creado de forma segura
        for row in conn.execute("SELECT * FROM TRABAJADORES WHERE DNI = ?;", (dni,)).fetchall():
            print(row)
    except Exception as e:
        print("❌ Error al crear el trabajador:", e)

def InsertarProducto():
    print("\n--- Tiendas disponibles ---")
    tiendas = conn.execute("SELECT IDTIENDA, NOMBRE FROM TIENDA;").fetchall()
    for tienda in tiendas:
        print(f"ID: {tienda[0]} - {tienda[1]}")
    
    try:
        idtienda = int(input("\nID de la tienda: "))
        nombre = input("Nombre del producto: ")
        descripcion = input("Descripción: ") or None
        precio = float(input("Precio: "))
        stock = int(input("Stock: "))

        conn.execute('''
        INSERT INTO PRODUCTOS (IDTIENDA, NOMBRE, DESCRIPCION, PRECIO, STOCK)
        VALUES (?, ?, ?, ?, ?);
        ''', (idtienda, nombre, descripcion, precio, stock))
        conn.commit()
        print(f"✅ Producto '{nombre}' creado correctamente.\n")
        
        # Mostrar producto creado de forma segura
        for row in conn.execute("SELECT * FROM PRODUCTOS WHERE NOMBRE = ? AND IDTIENDA = ?;", (nombre, idtienda)).fetchall():
            print(row)
    except Exception as e:
        print("❌ Error al crear el producto:", e)

def InsertarCliente():
    try:
        nombre = input("Nombre: ")
        ape1 = input("Primer apellido: ")
        ape2 = input("Segundo apellido (opcional): ") or None
        residencia = input("Residencia: ")
        
        # Validar teléfono
        while True:
            telefono = input("Teléfono (9 dígitos): ")
            if len(telefono) == 9 and telefono.isdigit():
                break
            print("❌ El teléfono debe tener exactamente 9 dígitos.")
        
        # Validar email
        while True:
            email = input("Email: ")
            if '@' in email and '.' in email:
                break
            print("❌ Email debe contener '@' y '.'")
        
        # Validar VIP
        while True:
            vip = input("VIP (SI/NO): ").upper()
            if vip in ['SI', 'NO']:
                break
            print("❌ VIP debe ser 'SI' o 'NO'")

        conn.execute('''
        INSERT INTO CLIENTES (NOMBRE, APE1, APE2, RESIDENCIA, TELEFONO, EMAIL, VIP, GASTO_TOTAL)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?);
        ''', (nombre, ape1, ape2, residencia, telefono, email, vip, 0.0))
        conn.commit()
        print(f"✅ Cliente '{nombre} {ape1}' creado correctamente.\n")
        
        # Mostrar cliente creado de forma segura
        print("📋 Cliente creado:")
        for row in conn.execute("SELECT * FROM CLIENTES WHERE EMAIL = ?;", (email,)).fetchall():
            print(row)
            
    except Exception as e:
        print("❌ Error al crear el cliente:", e)

def InsertarFactura():
    print("\n--- Productos disponibles ---")
    productos = conn.execute("SELECT IDPRODUCTO, NOMBRE, PRECIO, STOCK FROM PRODUCTOS;").fetchall()
    for producto in productos:
        print(f"ID: {producto[0]} - {producto[1]} - Precio: {producto[2]}€ - Stock: {producto[3]}")
    
    print("\n--- Clientes disponibles ---")
    clientes = conn.execute("SELECT IDCLIENTE, NOMBRE, APE1 FROM CLIENTES;").fetchall()
    for cliente in clientes:
        print(f"ID: {cliente[0]} - {cliente[1]} {cliente[2]}")
    
    try:
        idproducto = int(input("\nID del producto: "))
        idcliente = int(input("ID del cliente: "))
        fecha = input("Fecha de compra (YYYY-MM-DD): ")
        cantidad = int(input("Cantidad: "))
        iva = input("IVA (por defecto 21): ") or "21"

        # Verificar stock antes de insertar
        stock_actual = conn.execute("SELECT STOCK FROM PRODUCTOS WHERE IDPRODUCTO = ?", (idproducto,)).fetchone()
        if not stock_actual:
            print("❌ Error: El producto no existe.")
            return
        if stock_actual[0] < cantidad:
            print(f"❌ Error: Stock insuficiente. Stock actual: {stock_actual[0]}")
            return

        conn.execute('''
        INSERT INTO FACTURAS (IDPRODUCTO, IDCLIENTE, FECHACOMPRA, CANTIDAD, IVA)
        VALUES (?, ?, ?, ?, ?);
        ''', (idproducto, idcliente, fecha, cantidad, int(iva)))
        conn.commit()
        print("✅ Factura creada correctamente.\n")
        
        # Obtener la última factura insertada con índices correctos
        factura = conn.execute('''
        SELECT 
            f.IDFACTURA, f.IDPRODUCTO, f.IDCLIENTE, f.FECHACOMPRA, 
            f.PRECIO_UD, f.CANTIDAD, f.GASTO, f.IVA, f.GASTO_TOTAL,
            p.NOMBRE as producto_nombre, 
            c.NOMBRE || ' ' || c.APE1 as cliente_nombre
        FROM FACTURAS f
        JOIN PRODUCTOS p ON f.IDPRODUCTO = p.IDPRODUCTO
        JOIN CLIENTES c ON f.IDCLIENTE = c.IDCLIENTE
        WHERE f.IDFACTURA = (SELECT MAX(IDFACTURA) FROM FACTURAS)
        ''').fetchone()
        
        if factura:
            print("📄 Factura creada:")
            print(f"   ID Factura: {factura[0]}")
            print(f"   Producto: {factura[9]} (ID: {factura[1]})")
            print(f"   Cliente: {factura[10]} (ID: {factura[2]})")
            print(f"   Fecha: {factura[3]}")
            print(f"   Precio unidad: {factura[4]}€")
            print(f"   Cantidad: {factura[5]}")
            print(f"   Gasto (sin IVA): {factura[6]}€")
            print(f"   IVA: {factura[7]}%")
            print(f"   Gasto Total (con IVA): {factura[8]}€")
        
    except Exception as e:
        print("❌ Error al crear la factura:", e)

# ==================== MENÚ INSERTAR ====================
def menu_insertar():
    while True:
        print("\n" + "="*40)
        print("           INSERTAR DATOS")
        print("="*40)
        print("1. 🏪 Insertar Tienda")
        print("2. 👨‍💼 Insertar Trabajador")
        print("3. 📦 Insertar Producto")
        print("4. 👥 Insertar Cliente")
        print("5. 🧾 Insertar Factura")
        print("6. ↩️  Volver al menú principal")
        print("="*40)
        opcion = input("Elige una opción (1-6): ")
        match opcion:
            case "1":
                print("Has elegido crear una Tienda")
                InsertarTienda()
            case "2":
                print("Has elegido crear un Trabajador")
                InsertarTrabajador()
            case "3":
                print("Has elegido crear un Producto")
                InsertarProducto()
            case "4":
                print("Has elegido crear un Cliente")
                InsertarCliente()
            case "5":
                print("Has elegido crear una Factura")
                InsertarFactura()
            case "6":
                break
            case _:
                print("❌ Opción no válida. Inténtalo de nuevo.")

# ==================== MENÚ CONSULTAR ====================
def menu_consultar():
    while True:
        print("\n" + "="*40)
        print("           CONSULTAR DATOS")
        print("="*40)
        print("1. 🏪 Consultar Tiendas")
        print("2. 👨‍💼 Consultar Trabajadores")
        print("3. 📦 Consultar Productos")
        print("4. 👥 Consultar Clientes")
        print("5. 🧾 Consultar Facturas")
        print("6. 🔍 Consulta personalizada")
        print("7. ↩️  Volver al menú principal")
        print("="*40)
        opcion = input("Elige una opción (1-7): ")
        match opcion:
            case "1":
                consultar_tiendas()
            case "2":
                consultar_trabajadores()
            case "3":
                consultar_productos()
            case "4":
                consultar_clientes()
            case "5":
                consultar_facturas()
            case "6":
                consulta_personalizada()
            case "7":
                break
            case _:
                print("❌ Opción no válida. Inténtalo de nuevo.")

def consultar_tiendas():
    print("\n--- TIENDAS ---")
    try:
        tiendas = conn.execute("SELECT * FROM TIENDA;").fetchall()
        if not tiendas:
            print("No hay tiendas registradas.")
            return
        
        for tienda in tiendas:
            print(f"ID: {tienda[0]} | Nombre: {tienda[1]} | Dirección: {tienda[2]} | Código Postal: {tienda[3]} | Profit: {tienda[4]}€")
    except Exception as e:
        print("❌ Error al consultar tiendas:", e)

def consultar_trabajadores():
    print("\n--- TRABAJADORES ---")
    try:
        trabajadores = conn.execute('''
        SELECT t.*, ti.NOMBRE as tienda_nombre 
        FROM TRABAJADORES t 
        JOIN TIENDA ti ON t.IDTIENDA = ti.IDTIENDA;
        ''').fetchall()
        
        if not trabajadores:
            print("No hay trabajadores registrados.")
            return
        
        for trab in trabajadores:
            print(f"ID: {trab[0]} | Tienda: {trab[9]} | Nombre: {trab[2]} {trab[3]} {trab[4] or ''} | DNI: {trab[5]} | Tel: {trab[7]} | Sueldo: {trab[10]}€")
    except Exception as e:
        print("❌ Error al consultar trabajadores:", e)

def consultar_productos():
    print("\n--- PRODUCTOS ---")
    try:
        productos = conn.execute('''
        SELECT p.*, t.NOMBRE as tienda_nombre 
        FROM PRODUCTOS p 
        JOIN TIENDA t ON p.IDTIENDA = t.IDTIENDA;
        ''').fetchall()
        
        if not productos:
            print("No hay productos registrados.")
            return
        
        for prod in productos:
            print(f"ID: {prod[0]} | Tienda: {prod[6]} | Nombre: {prod[2]} | Precio: {prod[4]}€ | Stock: {prod[5]} | Desc: {prod[3]}")
    except Exception as e:
        print("❌ Error al consultar productos:", e)

def consultar_clientes():
    print("\n--- CLIENTES ---")
    try:
        clientes = conn.execute("SELECT * FROM CLIENTES;").fetchall()
        if not clientes:
            print("No hay clientes registrados.")
            return
        
        for cliente in clientes:
            print(f"ID: {cliente[0]} | Nombre: {cliente[1]} {cliente[2]} {cliente[3] or ''} | Tel: {cliente[5]} | Email: {cliente[6]} | Gasto Total: {cliente[7]}€ | VIP: {cliente[8]}")
    except Exception as e:
        print("❌ Error al consultar clientes:", e)

def consultar_facturas():
    print("\n--- FACTURAS ---")
    try:
        facturas = conn.execute('''
        SELECT f.*, p.NOMBRE as producto_nombre, c.NOMBRE || ' ' || c.APE1 as cliente_nombre
        FROM FACTURAS f
        JOIN PRODUCTOS p ON f.IDPRODUCTO = p.IDPRODUCTO
        JOIN CLIENTES c ON f.IDCLIENTE = c.IDCLIENTE
        ORDER BY f.FECHACOMPRA DESC;
        ''').fetchall()
        
        if not facturas:
            print("No hay facturas registradas.")
            return
        
        for fact in facturas:
            print(f"ID: {fact[0]} | Fecha: {fact[3]} | Producto: {fact[9]} | Cliente: {fact[10]} | Cantidad: {fact[5]} | Total: {fact[8]}€")
    except Exception as e:
        print("❌ Error al consultar facturas:", e)

def consulta_personalizada():
    """
    Construye y ejecuta un SELECT guiado por consola.
    - Pide tablas 1 a 1 (ENTER vacío pasa a campos).
    - Si hay >1 tabla, pregunta cómo unirlas (NATURAL JOIN / coma / expresión manual).
    - Pide campos (vacío -> *) y WHERE opcional.
    Usa la conexión global `conn`.
    """
    print("\n=== CONSULTA SQL INTERACTIVA ===")
    print("Introduce los nombres de las tablas UNA a UNA. Pulsa ENTER vacío para pasar al siguiente paso.\n")

    # --- Recoger tablas una a una ---
    tablas_lista = []
    contador = 1
    while True:
        entrada = input(f"Tabla #{contador} (ENTER vacío para terminar): ").strip()
        if entrada == "":
            break
        tablas_lista.append(entrada)
        contador += 1

    if not tablas_lista:
        print("❌ No se ha indicado ninguna tabla. Abortando consulta.")
        return

    # --- Si hay varias tablas, elegir método de unión ---
    if len(tablas_lista) > 1:
        print("\nHas introducido varias tablas:", ", ".join(tablas_lista))
        print("Elige cómo unirlas:")
        print("  1) NATURAL JOIN (recomendado si las tablas tienen columnas con mismo nombre)")
        print("  2) COMA (producto cartesiano)")
        print("  3) ESCRIBIR EXPRESIÓN JOIN manual (por ejemplo: 'PRODUCTOS p INNER JOIN FACTURAS f ON p.IDPRODUCTO=f.IDPRODUCTO')")
        modo_union = input("Opción (1/2/3) [1]: ").strip() or "1"

        if modo_union == "1":
            tablas_expr = " NATURAL JOIN ".join(tablas_lista)
        elif modo_union == "2":
            tablas_expr = ", ".join(tablas_lista)
        elif modo_union == "3":
            tablas_expr = input("Escribe la expresión JOIN completa: ").strip()
            if not tablas_expr:
                print("❌ Expresión JOIN vacía. Abortando.")
                return
        else:
            print("Opción inválida, usando NATURAL JOIN por defecto.")
            tablas_expr = " NATURAL JOIN ".join(tablas_lista)
    else:
        tablas_expr = tablas_lista[0]

    # --- Campos ---
    campos = input("\nIngresa los nombres de los campos (formato: TABLA.CAMPO) o deja vacío para todos (*): ").strip()
    if not campos:
        campos = "*"

    # --- WHERE ---
    where = input("Ingresa condición WHERE (ej: PRECIO>20 AND NOMBRE LIKE '%L%') o deja vacío si no hay: ").strip()

    # Construir consulta
    sql = f"SELECT {campos} FROM {tablas_expr}"
    if where:
        sql += f" WHERE {where}"

    print("\n📘 Consulta generada:")
    print(sql)

    # Ejecutar y mostrar resultados
    try:
        cursor = conn.execute(sql)
        # Si la consulta no devuelve filas (p. ej. es DML), cursor.description será None
        if cursor.description:
            resultados = cursor.fetchall()
            if resultados:
                print("\n✅ Resultados:")
                for fila in resultados:
                    print(fila)
            else:
                print("\n⚠️ La consulta se ejecutó correctamente pero no devolvió resultados.")
        else:
            # Consulta de modificación o sin resultado
            # Intentamos commit/sync dependiendo del tipo de conexión
            try:
                # Si la conexión tiene commit (sqlite), lo usamos; si tiene sync (libsql), lo usamos
                if hasattr(conn, "commit"):
                    conn.commit()
                if hasattr(conn, "sync"):
                    conn.sync()
            except Exception:
                pass
            print("\n✅ Consulta ejecutada (sin resultados que mostrar).")
    except Exception as e:
        print("\n❌ Error al ejecutar la consulta:", e)


# ==================== MENÚ ACTUALIZAR ====================
def menu_actualizar():
    while True:
        print("\n" + "="*40)
        print("           ACTUALIZAR DATOS")
        print("="*40)
        print("1. 🏪 Actualizar Tienda")
        print("2. 👨‍💼 Actualizar Trabajador")
        print("3. 📦 Actualizar Producto")
        print("4. 👥 Actualizar Cliente")
        print("5. ↩️  Volver al menú principal")
        print("="*40)

        opcion = input("Elige una opción (1-5): ")

        match opcion:
            case "1":
                actualizar_tienda()
            case "2":
                actualizar_trabajador()
            case "3":
                actualizar_producto()
            case "4":
                actualizar_cliente()
            case "5":
                break
            case _:
                print("❌ Opción no válida. Inténtalo de nuevo.")

def actualizar_tienda():
    consultar_tiendas()
    try:
        id_tienda = int(input("\nID de la tienda a actualizar: "))
        nombre = input("Nuevo nombre (dejar vacío para no cambiar): ")
        direccion = input("Nueva dirección (dejar vacío para no cambiar): ")
        cod_postal = input("Nuevo código postal (dejar vacío para no cambiar): ")
        
        campos = []
        valores = []
        
        if nombre:
            campos.append("NOMBRE = ?")
            valores.append(nombre)
        if direccion:
            campos.append("DIRECCION = ?")
            valores.append(direccion)
        if cod_postal:
            campos.append("COD_POSTAL = ?")
            valores.append(int(cod_postal))
        
        if not campos:
            print("❌ No se especificaron campos para actualizar.")
            return
        
        valores.append(id_tienda)
        query = f"UPDATE TIENDA SET {', '.join(campos)} WHERE IDTIENDA = ?"
        conn.execute(query, valores)
        conn.commit()
        print("✅ Tienda actualizada correctamente.")
        
    except Exception as e:
        print("❌ Error al actualizar tienda:", e)

def actualizar_trabajador():
    consultar_trabajadores()
    try:
        id_trabajador = int(input("\nID del trabajador a actualizar: "))
        sueldo = input("Nuevo sueldo (dejar vacío para no cambiar): ")
        horario = input("Nuevo horario (COMPLETO/PARCIAL, dejar vacío para no cambiar): ")
        telefono = input("Nuevo teléfono (dejar vacío para no cambiar): ")
        
        campos = []
        valores = []
        
        if sueldo:
            campos.append("SUELDO = ?")
            valores.append(float(sueldo))
        if horario:
            campos.append("HORARIO = ?")
            valores.append(horario.upper())
        if telefono:
            campos.append("TELEFONO = ?")
            valores.append(telefono)
        
        if not campos:
            print("❌ No se especificaron campos para actualizar.")
            return
        
        valores.append(id_trabajador)
        query = f"UPDATE TRABAJADORES SET {', '.join(campos)} WHERE IDTRABAJADOR = ?"
        conn.execute(query, valores)
        conn.commit()
        print("✅ Trabajador actualizado correctamente.")
        
    except Exception as e:
        print("❌ Error al actualizar trabajador:", e)

def actualizar_producto():
    consultar_productos()
    try:
        id_producto = int(input("\nID del producto a actualizar: "))
        precio = input("Nuevo precio (dejar vacío para no cambiar): ")
        stock = input("Nuevo stock (dejar vacío para no cambiar): ")
        descripcion = input("Nueva descripción (dejar vacío para no cambiar): ")
        
        campos = []
        valores = []
        
        if precio:
            campos.append("PRECIO = ?")
            valores.append(float(precio))
        if stock:
            campos.append("STOCK = ?")
            valores.append(int(stock))
        if descripcion:
            campos.append("DESCRIPCION = ?")
            valores.append(descripcion)
        
        if not campos:
            print("❌ No se especificaron campos para actualizar.")
            return
        
        valores.append(id_producto)
        query = f"UPDATE PRODUCTOS SET {', '.join(campos)} WHERE IDPRODUCTO = ?"
        conn.execute(query, valores)
        conn.commit()
        print("✅ Producto actualizado correctamente.")
        
    except Exception as e:
        print("❌ Error al actualizar producto:", e)

def actualizar_cliente():
    consultar_clientes()
    try:
        id_cliente = int(input("\nID del cliente a actualizar: "))
        telefono = input("Nuevo teléfono (dejar vacío para no cambiar): ")
        email = input("Nuevo email (dejar vacío para no cambiar): ")
        vip = input("Nuevo estado VIP (SI/NO, dejar vacío para no cambiar): ")
        
        campos = []
        valores = []
        
        if telefono:
            campos.append("TELEFONO = ?")
            valores.append(telefono)
        if email:
            campos.append("EMAIL = ?")
            valores.append(email)
        if vip:
            campos.append("VIP = ?")
            valores.append(vip.upper())
        
        if not campos:
            print("❌ No se especificaron campos para actualizar.")
            return
        
        valores.append(id_cliente)
        query = f"UPDATE CLIENTES SET {', '.join(campos)} WHERE IDCLIENTE = ?"
        conn.execute(query, valores)
        conn.commit()
        print("✅ Cliente actualizado correctamente.")
        
    except Exception as e:
        print("❌ Error al actualizar cliente:", e)

# ==================== MENÚ ELIMINAR ====================
def menu_eliminar():
    while True:
        print("\n" + "="*40)
        print("           ELIMINAR DATOS")
        print("="*40)
        print("1. 🏪 Eliminar Tienda")
        print("2. 👨‍💼 Eliminar Trabajador")
        print("3. 📦 Eliminar Producto")
        print("4. 👥 Eliminar Cliente")
        print("5. 🧾 Eliminar Factura")
        print("6. ↩️  Volver al menú principal")
        print("="*40)

        opcion = input("Elige una opción (1-6): ")

        match opcion:
            case "1":
                eliminar_tienda()
            case "2":
                eliminar_trabajador()
            case "3":
                eliminar_producto()
            case "4":
                eliminar_cliente()
            case "5":
                eliminar_factura()
            case "6":
                break
            case _:
                print("❌ Opción no válida. Inténtalo de nuevo.")

def eliminar_tienda():
    consultar_tiendas()
    try:
        id_tienda = int(input("\nID de la tienda a eliminar: "))
        confirmar = input("¿Estás seguro de que quieres eliminar esta tienda? (s/n): ")
        if confirmar.lower() == 's':
            conn.execute("DELETE FROM TIENDA WHERE IDTIENDA = ?", (id_tienda,))
            conn.commit()
            print("✅ Tienda eliminada correctamente.")
        else:
            print("❌ Eliminación cancelada.")
    except Exception as e:
        print("❌ Error al eliminar tienda:", e)

def eliminar_trabajador():
    consultar_trabajadores()
    try:
        id_trabajador = int(input("\nID del trabajador a eliminar: "))
        confirmar = input("¿Estás seguro de que quieres eliminar este trabajador? (s/n): ")
        if confirmar.lower() == 's':
            conn.execute("DELETE FROM TRABAJADORES WHERE IDTRABAJADOR = ?", (id_trabajador,))
            conn.commit()
            print("✅ Trabajador eliminado correctamente.")
        else:
            print("❌ Eliminación cancelada.")
    except Exception as e:
        print("❌ Error al eliminar trabajador:", e)

def eliminar_producto():
    consultar_productos()
    try:
        id_producto = int(input("\nID del producto a eliminar: "))
        confirmar = input("¿Estás seguro de que quieres eliminar este producto? (s/n): ")
        if confirmar.lower() == 's':
            conn.execute("DELETE FROM PRODUCTOS WHERE IDPRODUCTO = ?", (id_producto,))
            conn.commit()
            print("✅ Producto eliminado correctamente.")
        else:
            print("❌ Eliminación cancelada.")
    except Exception as e:
        print("❌ Error al eliminar producto:", e)

def eliminar_cliente():
    consultar_clientes()
    try:
        id_cliente = int(input("\nID del cliente a eliminar: "))
        confirmar = input("¿Estás seguro de que quieres eliminar este cliente? (s/n): ")
        if confirmar.lower() == 's':
            conn.execute("DELETE FROM CLIENTES WHERE IDCLIENTE = ?", (id_cliente,))
            conn.commit()
            print("✅ Cliente eliminado correctamente.")
        else:
            print("❌ Eliminación cancelada.")
    except Exception as e:
        print("❌ Error al eliminar cliente:", e)

def eliminar_factura():
    consultar_facturas()
    try:
        id_factura = int(input("\nID de la factura a eliminar: "))
        confirmar = input("¿Estás seguro de que quieres eliminar esta factura? (s/n): ")
        if confirmar.lower() == 's':
            conn.execute("DELETE FROM FACTURAS WHERE IDFACTURA = ?", (id_factura,))
            conn.commit()
            print("✅ Factura eliminada correctamente.")
        else:
            print("❌ Eliminación cancelada.")
    except Exception as e:
        print("❌ Error al eliminar factura:", e)

# ==================== INICIO DEL PROGRAMA ====================
if __name__ == "__main__":
    menu_principal()